
在写代码以前，把下面的问题都考虑清楚， 把fakewechat 真正的实用起来。

前几天，在一个群里，聊起了设计。一位年轻人对高性能领域一阵嘲讽。最后他说了一句话 我觉得很有道理，你设计得这么复杂，这么高性能。

但是根本没人会用。这有意义吗？

说得很对，我们需要一些用户，把系统先用起来。所以 这个后端的开发暂时放弃了。 我已经写了一个很简单，但是足够强的单服务器代码。

希望它能有用。

系统的一个重要目标，安全和隐私。 不会被大数据所分析，所有的用户信息除了用户自己，可以不会被任何人所获取。即使是系统的拥有者也无法获取！

个人的隐私是无价的！

具体实现：

Q: 希望支持1亿-10亿用户，系统该是怎么样的？
A: 很笼统的概念，支持1亿-10亿用户，这个IM 系统需要按照Regin 进行分区，每个客户都只能就近连接自己的Regin, 比如在中国 北京一个regin, 上海一个regin, 深圳一个
regin, 假设每个regin 可以负载3000万 用户，那么加起来接近1亿用户了。细节慢慢描述


Q: 开发语言选什么？理由是什么？
A: 服务器 GO + GRPC，考虑GC的问题。选go的一个好处 是可以在3个平台直接开发，测试，相对而言工程方便

Q: 如何在本地模拟一个micor 的系统
A: 

Q: 分布式系统的业务跟踪 监控系统怎么做？
A:

Q: 是否采用微服务？
A: 不太赞成使用 微服务这样的时髦的词语，作为大型分布式系统，一个服务注册，发布，服务治理的业务是必须的。所有大型系统
必须经历的过程。 所以会用类似的服务。不太想用java 的组件，可以考虑自己简单的实现一个。

Q: 客户端呢？
A:  web + Mobile

Q: Regin 之间如何通信？
A: 

Q: Regin 的设计如何？
A:

Q: Regin 的SLA 目标
A: 99.99%

Q: 大型系统 任何一点可能故障如何保障 SLA?
A: 太复杂

Q: 用户在不同Regin里临时切换，比如上海的用户到了深圳，怎么做？长期切换怎么做（一个上海的用户搬到了北京，怎么解决）？
A:

Q: 用户注册怎么做？
A:

Q: 用户的唯一编号是什么？
A: 整数 int32, 其他的 属性 比如 email 手机 都是映射到唯一整数上

Q: 用户的聊天数据安全怎么做？
A: 考虑聊天信息完全RSA

Q: 一个Regin 如何保障水平扩展
A: 参考QQ的文档

Q: 支持多终端？
A: 会

Q: 支持类似个人空间的业务，加强黏性吗？
A: 会

Q: 系统的安全性的设计
A:

Q: 海量压力突发时，系统如何设计？
A:

Q: 如何防止雪崩，系统如何服务降级
A:

Q: 内部故障 如何防止蔓延
A:

Q: 如何防止单点故障
A:


Q: 数据库的高可用 高可扩展系统设计
A: 使用一种现有的mysql 高可用的简单方案吧. 初步设计为mycat + mysql



Q: 消息存储的 高可用 高可扩展系统设计
A: 很难, redis cluster

Q: 消息可靠服务
A:  kafka



Q: 初期实现的业务服务
A:  1 用户登录
    2 用户好友管理
    3 用户之间信息交互
    4 朋友圈
    
Q: spam 解决
A: spam 最大的问题是成本，如果一个spamer发 spam的成本很高，就没有spam了，所以系统可以参考 BT 的概念来解决这个问题，用户发的加好友请求
需要一个计算量证明。比如 请求的hash 的前10个字节是0，这样如果计算量很大，那么spamer就会离开这个系统。 但是这个值也不应该太大，所以这个数值
可以动态调节

wiki：
  web端实现的思路参考：
      https://github.com/sigalor/whatsapp-web-reveng
      
      
user_id_info
user_id_friend
user_id_message
sum_user
      




